using System;
using System.IO;
using System.Collections.Generic;
namespace PuzzleSolver
{
    class Parser
    {
        private string file;
        private List<Tile> pieces;
//Read the file (file is currently hardcoded in), return all the lines as an array of strings
        public string[] ReadFile()
        {
            StreamReader reader = File.OpenText(file);
            string line;
            List<string> all_lines = new List<string>();
            while ((line = reader.ReadLine()) != null) {
                all_lines.Add(line);
                }
            return all_lines.ToArray();
        }
//Basic constructer, takes in file_name and creates pieces List
        public Parser(string file_name){
            file = file_name;
            pieces = new List<Tile>();
        }
//Takes the string array of all lines, finds the number of rows and the max row length to create rectangular 2D array
//Transfers the string array into the 2D array of chars, iterates through each char in the array, if the char is significant, send it to CreateTile()
//Result of CreateTile() is used in the constructor of a new Tile()
        public void Parse() {
        string[] all_lines = ReadFile();
        int col_length = all_lines.Length;
        int row_length = all_lines[0].Length;
        foreach (string s in all_lines){
            if(row_length < s.Length){
                row_length = s.Length;
                }
            }
        char[,] lines = new char[col_length, row_length];
        int i = 0;
        int j = 0;
        foreach (string s in all_lines){
            j=0;
            foreach (char c in s) {
                lines[i,j] = c;
                j++;
                }
                for(int k = j; k < row_length; k++) {
                    lines[i,k] = ' ';
                }
            i++;
            }
        for(int n = 0; n < col_length; n++){
            for(int m = 0; m < row_length; m++){
                if(lines[n,m] != ' '){
                    char[,] new_tile = new char[col_length, row_length];
                    for(int q = 0; q < col_length; q++){
                        for(int w = 0; w < row_length; w++){
                            new_tile[q,w] = ' ';
                        }
                    }
                    CreateTile(new_tile, lines, n, m, col_length, row_length);
                    Tile t = new Tile(new_tile, row_length, col_length);
                    Console.WriteLine(t.size);
                    pieces.Add(t);
                    }
                }
            }
            Console.ReadKey();
        }
//Recursive function, takes an all space 2D array and the parsed 2D array (same size), the two indices, and the array sizes (for convenience)
//Changes the value at i,j in tile to the value at i,j in all_tiles, sets that value to be insignificant in all_tiles, then checks all relevant directions
//For the significance of the char at each of those spots, calling itself on that char if that char is significant
        public void CreateTile(char[,] tile, char[,] all_tiles, int i, int j, int cl, int rl) {
            tile[i,j] = all_tiles[i,j];
            all_tiles[i,j] = ' ';
            if(i>0){
                if(all_tiles[i-1,j] != ' '){
                    CreateTile(tile, all_tiles, i-1, j, cl, rl);
                }
            }
            if(j>0){
                if(all_tiles[i,j-1] != ' '){
                    CreateTile(tile, all_tiles, i, j-1, cl, rl);
                }
            }
            if(i<(cl-1)){
                if(all_tiles[i+1,j] != ' '){
                    CreateTile(tile, all_tiles, i+1, j, cl, rl);
                }
            }
            if(j<(rl-1)){
                if(all_tiles[i,j+1] != ' '){
                    CreateTile(tile, all_tiles, i, j+1, cl, rl);
                }
            }
        }
    }
    class ParseTester{
        static void Main(){
            Parser p = new Parser("C:\\Users\\Xeny\\trivial.txt");
            p.Parse();
        }
    }
}